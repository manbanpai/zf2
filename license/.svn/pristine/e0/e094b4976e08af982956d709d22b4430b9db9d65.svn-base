<?php
namespace Common\Crypt;

class PublicKey extends AbstractKey
{
    const CERT_START = '-----BEGIN CERTIFICATE-----';
    
    /**
     * @var string
     */
    protected $certString = null;
    
    public function __construct($pemStringOrCertficate)
    {
        $result = openssl_pkey_get_public($pemStringOrCertficate);
        if (false === $result){
            throw new \Exception('无法加载public key');
        }
        if (strpos($pemStringOrCertficate, self::CERT_START) !== false){
            $this->certString = $pemStringOrCertficate;
        }else{
            $this->pemString = $pemStringOrCertficate;
        }
        $this->keyResource = $result;
        $this->details = openssl_pkey_get_details($this->keyResource);
    }
    
    public function encrypt($data)
    {
        if (empty($data)){
            return false;
        }
        $encrypted = '';
        if (openssl_private_encrypt($in, $encrypted, $this->getKeyResource())){
            return base64_encode($encrypted);
        }
    }
    
    public function decrypt($data)
    {
        if (!is_string($data)){
            return false;
        }
        if ('' === $data){
            return false;
        }
        $encrypted = '';
        if (openssl_private_decrypt(base64_decode($str), $encrypted, $this->getKeyResource())){
            return trim($encrypted);
        }
    }
    
    public function getCert()
    {
        return $this->certString;
    }
}