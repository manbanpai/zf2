<?php
namespace Member\Model;

use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

class License implements InputFilterAwareInterface
{
    public $id;
    public $max_client_number;
    public $soft_valid_days;
    public $client_info;
    public $server_domain;
    public $server_cpu_id;
    public $server_ip;
    public $server_mac;
    public $license_savepath;
    public $sha1file;
    public $status;
    public $create_time;
    public $serialnumber;
    public $certficate_id;
    
    public $serial;
    
    protected $inputFilter;
    
    public function exchangeArray($data)
    {
        $this->id = (!empty($data['id'])) ? $data['id'] : '';
        $this->max_client_number = (!empty($data['max_client_number'])) ? $data['max_client_number'] : '';
        $this->soft_valid_days = (!empty($data['soft_valid_days'])) ? $data['soft_valid_days'] : '';
        $this->client_info  = (!empty($data['client_info'])) ? $data['client_info'] : '';
        $this->server_domain = (!empty($data['server_domain'])) ? $data['server_domain'] : '';
        $this->server_cpu_id = (!empty($data['server_cpu_id'])) ? $data['server_cpu_id'] : '';
        $this->server_mac = (!empty($data['server_mac'])) ? $data['server_mac'] : '';
        $this->license_savepath = (!empty($data['license_savepath'])) ? $data['license_savepath'] : '';
        $this->sha1file = (!empty($data['sha1file'])) ? $data['sha1file'] : '';
        $this->status = (!empty($data['status'])) ? $data['status'] : '';
        $this->create_time = (!empty($data['create_time']) || $data['create_time']==null) ? time() : 0;
        $this->serialnumber = (!empty($data['serialnumber'])) ? $data['serialnumber'] : '';
        $this->certficate_id = (!empty($data['certficate_id'])) ? $data['certficate_id'] : 0;
        
        $this->serial = (!empty($data['serial'])) ? $data['serial'] : '';
    }
    
    public function getArrayCopy()
    {
        return get_object_vars($this);
    }
    
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used");
    }
    
    public function getInputFilter()
    {
        if (!$this->inputFilter){
            $inputFilter    = new InputFilter();
            $factory        = new InputFactory();
            
            $inputFilter->add($factory->createInput(array(
                'name'      => 'id',
                'required'  => true,
                'filters'   => array(
                    array('name' => 'Int'),
                )
            )));
            $inputFilter->add($factory->createInput(array(
                'name'      => 'max_client_number',
                'required'  => true,
                'filters'   => array(
                    array('name' => 'Int'),
                )
            )));
            $inputFilter->add($factory->createInput(array(
                'name'      => 'soft_valid_days',
                'required'  => true,
                'filters'   => array(
                    array('name' => 'Int'),
                )
            )));
            $inputFilter->add($factory->createInput(array(
                'name'      => 'client_info',
                'required'  => true,
                'filters'   => array(
                    array('name' => 'StripTags'),
                    array('name' => 'StringTrim')
                )
            )));
            $inputFilter->add($factory->createInput(array(
                'name'      => 'server_domain',
                'required'  => true,
                'filters'   => array(
                    array('name' => 'StripTags'),
                    array('name' => 'StringTrim')
                )
            )));
            $inputFilter->add($factory->createInput(array(
                'name'      => 'server_cpu_id',
                'required'  => true,
                'filters'   => array(
                    array('name' => 'StripTags'),
                    array('name' => 'StringTrim')
                )
            )));
            $inputFilter->add($factory->createInput(array(
                'name'      => 'server_ip',
                'required'  => true,
                'filters'   => array(
                    array('name' => 'StripTags'),
                    array('name' => 'StringTrim')
                )
            )));
            $inputFilter->add($factory->createInput(array(
                'name'      => 'server_mac',
                'required'  => true,
                'filters'   => array(
                    array('name' => 'StripTags'),
                    array('name' => 'StringTrim')
                )
            )));
            
            $this->inputFilter = $inputFilter;
        }
        return $this->inputFilter;
    }
}